#!/bin/bash

# Brendan Williams - April 2020
# This script will create fieldmaps using topup in fsl. The phase encoding directions for the fieldmap's json file will be parsed to correctly set the parameters for an acqusition parameter file that will be created and used by the script for topup.

preptopup () {
PROJECT_DIR=/storage/gold/cinn/2019/SRfMRI
BIDS_DIR=$PROJECT_DIR/BIDS

AP=`grep -Po '"PhaseEncodingDirection": *\K"[^"]*"' $BIDS_DIR/$1/fmap/$1_acq-AP_fieldmap.json`

PA=`grep -Po '"PhaseEncodingDirection": *\K"[^"]*"' $BIDS_DIR/$1/fmap/$1_acq-PA_fieldmap.json`

TRT=0.0476

AP="${AP:1:${#AP}-2}"
if [[ $AP == "j-" ]]
then
AP_out="0	1	0"
elif [[ $AP == "j" ]]
then
AP_out="0	-1	0"
elif [[ $AP == "i-" ]]
then
AP_out="1	0	0"
elif [[ $AP == "i" ]]
then
AP_out="-1	0	0"
else
echo check fieldmap phase encoding direction
fi

PA="${PA:1:${#PA}-2}"
if [[ $PA == "j-" ]]
then
PA_out="0	1	0"
elif [[ $PA == "j" ]]
then
PA_out="0	-1	0"
elif [[ $PA == "i-" ]]
then
PA_out="1	0	0"
elif [[ $PA == "i" ]]
then
PA_out="-1	0	0"
else
echo check fieldmap phase encoding direction
fi

>$PROJECT_DIR/acquisition_parameters_temp.txt
for i in "$AP_out" "$PA_out"
do
for ii in {1..3}
do
printf '%s\t%s\n' "$i" "$TRT" >> $PROJECT_DIR/acquisition_parameters_temp.txt
done
done

echo merging fieldmaps $1

fslmerge -t $PROJECT_DIR/preprocessed/$1/fmap/my_b0s.nii.gz $BIDS_DIR/$1/fmap/$1_acq-AP_fieldmap.nii.gz $BIDS_DIR/$1/fmap/$1_acq-PA_fieldmap.nii.gz
}

# Brendan Williams - April 2020
# This function will use the binarised functional space masks to extract the functional timeseries from the SR dataset.

extmask () {
PROJECT_DIR=/storage/gold/cinn/2019/SRfMRI
MASK_DIR=$PROJECT_DIR/masks
TS_DIR=$PROJECT_DIR/timeseries

mkdir -p $TS_DIR/${1}
cd ${MASK_DIR}/${1}/Analysis

for mask in *

do

maskname="${mask%.*}"
echo $maskname
fslmeants -i $PROJECT_DIR/preprocessed/${1}/func.feat/filtered_func_data.nii.gz -m ${mask} -o $TS_DIR/${1}/${maskname}.txt

done

}


# Brendan Williams - April 2020
# This function will combine the CM + Pf, and MDl + MDm masks, and create a new directory with all masks (cortical, striatal, and thalamic) for timeseries extraction included.

mergemask () {
PROJECT_DIR=/storage/gold/cinn/2019/SRfMRI
MASK_DIR=$PROJECT_DIR/masks
BIN_THR=0.3

cd $MASK_DIR/

for ii in $1

do 

mkdir -p $MASK_DIR/${ii}/Analysis
cd ${MASK_DIR}/${ii}/func_binarised

fslmaths Left-CM_func_binary${BIN_THR}.nii.gz -add Left-Pf_func_binary${BIN_THR}.nii.gz $MASK_DIR/${ii}/Analysis/Left-CMPf_func_binary${BIN_THR}.nii.gz

fslmaths $MASK_DIR/${ii}/Analysis/Left-CMPf_func_binary${BIN_THR}.nii.gz -thr 0.5 $MASK_DIR/${ii}/Analysis/Left-CMPf_func_binary${BIN_THR}.nii.gz

fslmaths Left-MDl_func_binary${BIN_THR}.nii.gz -add Left-MDm_func_binary${BIN_THR}.nii.gz $MASK_DIR/${ii}/Analysis/Left-MD_func_binary${BIN_THR}.nii.gz

fslmaths $MASK_DIR/${ii}/Analysis/Left-MD_func_binary${BIN_THR}.nii.gz -thr 0.5 $MASK_DIR/${ii}/Analysis/Left-MD_func_binary${BIN_THR}.nii.gz

cp Left-lOFC_func_binary${BIN_THR}.nii.gz $MASK_DIR/${ii}/Analysis/Left-lOFC_func_binary${BIN_THR}.nii.gz

cp Left-mOFC_func_binary${BIN_THR}.nii.gz $MASK_DIR/${ii}/Analysis/Left-mOFC_func_binary${BIN_THR}.nii.gz

cp AC_DC_VC_L_func_binary${BIN_THR}.nii.gz $MASK_DIR/${ii}/Analysis/AC_DC_VC_L_func_binary${BIN_THR}.nii.gz

fslmaths Right-CM_func_binary${BIN_THR}.nii.gz -add Right-Pf_func_binary${BIN_THR}.nii.gz $MASK_DIR/${ii}/Analysis/Right-CMPf_func_binary${BIN_THR}.nii.gz

fslmaths $MASK_DIR/${ii}/Analysis/Right-CMPf_func_binary${BIN_THR}.nii.gz -thr 0.5 $MASK_DIR/${ii}/Analysis/Right-CMPf_func_binary${BIN_THR}.nii.gz

fslmaths Right-MDl_func_binary${BIN_THR}.nii.gz -add Right-MDm_func_binary${BIN_THR}.nii.gz $MASK_DIR/${ii}/Analysis/Right-MD_func_binary${BIN_THR}.nii.gz

fslmaths $MASK_DIR/${ii}/Analysis/Right-MD_func_binary${BIN_THR}.nii.gz -thr 0.5 $MASK_DIR/${ii}/Analysis/Right-MD_func_binary${BIN_THR}.nii.gz

cp Right-lOFC_func_binary${BIN_THR}.nii.gz $MASK_DIR/${ii}/Analysis/Right-lOFC_func_binary${BIN_THR}.nii.gz

cp Right-mOFC_func_binary${BIN_THR}.nii.gz $MASK_DIR/${ii}/Analysis/Right-mOFC_func_binary${BIN_THR}.nii.gz

cp AC_DC_VC_R_func_binary${BIN_THR}.nii.gz $MASK_DIR/${ii}/Analysis/AC_DC_VC_R_func_binary${BIN_THR}.nii.gz

done

}

# Brendan Williams - April 2020
# This script will run feat preprocessing based on a template fsf file

featrun () {
PROJECT_DIR=/storage/gold/cinn/2019/SRfMRI
BIDS_DIR=$PROJECT_DIR/BIDS

#Set the correct number of volumes for each participant

v=`fslinfo $BIDS_DIR/${1}/func/${1}_task-main_bold.nii.gz | grep "^dim4" | awk '{print $2}'`

volVox=1376256 # Number of voxels in a single volume

let nVox=volVox*v # Total number of voxels for acqusition

echo ${v} volumes, creating file ${1}

# Substitute values

sed -e "s/sub-001/${1}/g" -e "s/1824915456/${nVox}/g" -e "s/1326/${v}/g" <${PROJECT_DIR}/Feat_Preprocessing.fsf> ${PROJECT_DIR}/Feat_Preprocessing_${1}.fsf

echo starting Feat ${1}

feat ${PROJECT_DIR}/Feat_Preprocessing_${1}.fsf

rm ${PROJECT_DIR}/Feat_Preprocessing_${1}.fsf

echo Feat fin ${1}

}

# Brendan Williams - April 2020
# This script will convert striatal masks (Based on Choi et al, 2012 10.1152/jn.00270.2012) from standard space to functional space.
strmask () {
PROJECT_DIR=/storage/gold/cinn/2019/SRfMRI
FEAT_DIR=$PROJECT_DIR/preprocessed
MASK_DIR=$PROJECT_DIR/masks
BIN_THR=0.3

for i in "AC_DC_VC_L" "AC_DC_VC_R"
do
flirt -in $MASK_DIR/CHOI_STR_MNI/${i}.nii.gz -ref $FEAT_DIR/${1}/func.feat/reg/example_func -out $MASK_DIR/${1}/func/${i}_func.nii.gz -init $FEAT_DIR/${1}/func.feat/reg/standard2example_func.mat -applyxfm

fslmaths $MASK_DIR/${1}/func/${i}_func.nii.gz -thr $BIN_THR -bin $MASK_DIR/${1}/func_binarised/${i}_func_binary${BIN_THR}.nii.gz
done
}

"$@"
